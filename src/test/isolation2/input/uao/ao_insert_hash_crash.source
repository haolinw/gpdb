--
-- Test TRUNCATE should not remove shared AO hash entry in use by other transactions.
--

create extension if not exists gp_inject_fault;

drop database if exists testdb0;
create database testdb0;
1:@db_name testdb0: create table ao_insert_hash_crash_@orientation@ (a int, b int) with (appendonly=true, orientation=@orientation@);
1:@db_name testdb0: insert into ao_insert_hash_crash_@orientation@ select 2, i from generate_series(1,10)i;
1q:
drop database if exists testdb1;
create database testdb1 with template testdb0;

SELECT gp_inject_fault('appendonly_insert', 'suspend', '', '', 'ao_insert_hash_crash_@orientation@', 1, 1, 0, dbid) FROM gp_segment_configuration WHERE role = 'p' AND content = 0;
1:@db_name testdb0: begin;
1&:@db_name testdb0: insert into ao_insert_hash_crash_@orientation@ select * from ao_insert_hash_crash_@orientation@;

SELECT gp_wait_until_triggered_fault('appendonly_insert', 1, dbid) FROM gp_segment_configuration WHERE role = 'p' AND content = 0;

2:@db_name testdb1: truncate ao_insert_hash_crash_@orientation@;

SELECT gp_inject_fault('appendonly_insert', 'reset', dbid) FROM gp_segment_configuration WHERE role = 'p' AND content = 0;
1<:
-- Without the fix, issue would be reproduced as "ERROR:  expected an AO hash entry for relid xxxxx but found none".
1:@db_name testdb0: end;

1q:
2q:
