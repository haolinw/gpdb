include: helpers/server_helpers.sql;

-- setup
-- Set fsync on since we need to test the fsync code logic.
!\retcode gpconfig -c fsync -v on --skipvalidation;
!\retcode gpstop -u;

-- test scenario

-- The test is to validate crash recovery can be completed, for WAL
-- records generated by same transaction create and truncate followed
-- by abort transaction. Context is table created in same transaction
-- on truncate command performs unsafe truncate operation where it
-- emits WAL record for file truncate and truncates the file. During
-- crash recovery, file truncate WAL record replay will queue fsync
-- request. Replay of abort record will unlink the file. There used to
-- bug where abort record replay didn't emit forget fsync request
-- before unlink the file. This cased the crash recovery to PANIC as
-- couldn't complete the stale fsync request registered by file
-- truncate WAL record.
-- Also this is a chance of simply testing SyncAllXLogFile() thats fsync wal
-- files only during crash recovery.
1: DROP TABLE IF EXISTS ao_fsync_panic_tbl;
1: CHECKPOINT;
1: CREATE TABLE ao_fsync_panic_tbl(id int) WITH (appendonly=true);
2: SELECT gp_inject_fault_infinite('before_wait_VirtualXIDsDelayingChkpt', 'suspend', dbid) FROM gp_segment_configuration WHERE ROLE = 'p';
3&: CHECKPOINT;
1: INSERT INTO ao_fsync_panic_tbl SELECT generate_series(1, 1000000);
2: SELECT gp_inject_fault_infinite('before_wait_VirtualXIDsDelayingChkpt', 'resume', dbid) FROM gp_segment_configuration WHERE ROLE = 'p';
3<:
1: INSERT INTO ao_fsync_panic_tbl SELECT generate_series(2000000,2000100);

-- Stop the primary immediately and promote the mirror.
2: SELECT pg_ctl(datadir, 'stop', 'immediate') FROM gp_segment_configuration WHERE role='p' AND content = 0;
2: SELECT gp_request_fts_probe_scan();
--2: SELECT role, preferred_role FROM gp_segment_configuration WHERE content = 0;

--2: SELECT pg_ctl(datadir, 'stop', 'immediate') FROM gp_segment_configuration WHERE role = 'p' AND content <> -1;

--select gp_request_fts_probe_scan();

-- expect: to see the content 0, preferred primary is mirror and it's down
-- the preferred mirror is primary and it's up and not-in-sync
2: SELECT content, preferred_role, role, status, mode FROM gp_segment_configuration WHERE content = 0;
-- wait for content 0 (earlier mirror, now primary) to finish the promotion
0U: select 1;
-- Quit this utility mode session, as need to start fresh one below
0Uq:
4: TRUNCATE ao_fsync_panic_tbl;
4: INSERT INTO ao_fsync_panic_tbl SELECT generate_series(3000000,3000100);

!\retcode gprecoverseg -a;
select wait_until_all_segments_synchronized();

-- cleanup
!\retcode gpconfig -r fsync --skipvalidation;
!\retcode gpstop -u;
