-- Check changing table access method
-- Scenario 1: Heap to Heap
CREATE TABLE heap2heap(a int, b int) DISTRIBUTED BY (a);
CREATE TABLE heap2heap2(a int, b int) DISTRIBUTED BY (a);
INSERT INTO heap2heap SELECT i,i FROM generate_series(1,5) i;
INSERT INTO heap2heap2 SELECT i,i FROM generate_series(1,5) i;
CREATE TEMP TABLE relfilebeforeheap AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('heap2heap', 'heap2heap2')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('heap2heap', 'heap2heap2') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- changing to the same access method shouldn't rewrite the table
-- (i.e. the relfilenodes shouldn't change)
ALTER TABLE heap2heap SET ACCESS METHOD heap;
ALTER TABLE heap2heap2 SET WITH (appendoptimized=false);
CREATE TEMP TABLE relfileafterheap AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('heap2heap', 'heap2heap2')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('heap2heap', 'heap2heap2') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- relfilenodes shouldn't change
SELECT count(*) FROM (SELECT * FROM relfilebeforeheap UNION SELECT * FROM relfileafterheap)a;
 count 
-------
     8
(1 row)

-- Scenario 2: Heap to AO
CREATE TABLE heap2ao(a int, b int) DISTRIBUTED BY (a);
CREATE TABLE heap2ao2(a int, b int) DISTRIBUTED BY (a);
CREATE INDEX heapi ON heap2ao(b);
ALTER TABLE heap2ao2 ADD CONSTRAINT unique_constraint UNIQUE (a);
INSERT INTO heap2ao SELECT i,i FROM generate_series(1,5) i;
INSERT INTO heap2ao2 SELECT i,i FROM generate_series(1,5) i;
CREATE TEMP TABLE relfilebeforeao AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('heap2ao', 'heap2ao2', 'heapi')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('heap2ao', 'heap2ao2', 'heapi') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- Altering a heap table with a unique index to AO should error out
-- as unique indexes aren't supported on AO tables
ALTER TABLE heap2ao2 SET ACCESS METHOD ao_row;
ERROR:  append-only tables do not support unique indexes
DETAIL:  heap table "heap2ao2" being altered contains unique index
ALTER TABLE heap2ao2 DROP CONSTRAINT unique_constraint;
-- Set default storage options for the table to inherit from
SET gp_default_storage_options = 'blocksize=65536, compresstype=zlib, compresslevel=5, checksum=true';
-- Alter table heap to AO should work
ALTER TABLE heap2ao SET ACCESS METHOD ao_row;
ALTER TABLE heap2ao2 SET WITH (appendoptimized=true);
-- The altered table should inherit storage options from gp_default_storage_options
SELECT blocksize,compresslevel,checksum,compresstype,columnstore
FROM pg_appendonly WHERE relid='heap2ao'::regclass::oid;
 blocksize | compresslevel | checksum | compresstype | columnstore 
-----------+---------------+----------+--------------+-------------
     32768 |             0 | t        |              | f
(1 row)

SELECT blocksize,compresslevel,checksum,compresstype,columnstore
FROM pg_appendonly WHERE relid='heap2ao2'::regclass::oid;
 blocksize | compresslevel | checksum | compresstype | columnstore 
-----------+---------------+----------+--------------+-------------
     32768 |             0 | t        |              | f
(1 row)

-- Check data is intact
SELECT * FROM heap2ao;
 a | b 
---+---
 2 | 2
 3 | 3
 4 | 4
 1 | 1
 5 | 5
(5 rows)

SELECT * FROM heap2ao2;
 a | b 
---+---
 5 | 5
 2 | 2
 3 | 3
 4 | 4
 1 | 1
(5 rows)

-- The tables and indexes should have been rewritten (should have different relfilenodes)
CREATE TEMP TABLE relfileafterao AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('heap2ao', 'heap2ao2', 'heapi')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('heap2ao', 'heap2ao2', 'heapi') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT * FROM relfilebeforeao INTERSECT SELECT * FROM relfileafterao;
 segid | relfilenode 
-------+-------------
(0 rows)

-- aux tables are created, pg_appendonly row is created
-- FIXME: add check for gp_aoblkdir
SELECT * FROM gp_toolkit.__gp_aoseg('heap2ao');
 segment_id | segno | eof | tupcount | varblockcount | eof_uncompressed | modcount | formatversion | state 
------------+-------+-----+----------+---------------+------------------+----------+---------------+-------
          0 |     0 |  88 |        3 |             1 |               88 |        1 |             3 |     1
          1 |     0 |  40 |        1 |             1 |               40 |        1 |             3 |     1
          2 |     0 |  40 |        1 |             1 |               40 |        1 |             3 |     1
(3 rows)

SELECT * FROM gp_toolkit.__gp_aovisimap('heap2ao');
 tid | segno | row_num 
-----+-------+---------
(0 rows)

SELECT * FROM gp_toolkit.__gp_aoseg('heap2ao2');
 segment_id | segno | eof | tupcount | varblockcount | eof_uncompressed | modcount | formatversion | state 
------------+-------+-----+----------+---------------+------------------+----------+---------------+-------
          1 |     0 |  40 |        1 |             1 |               40 |        1 |             3 |     1
          2 |     0 |  40 |        1 |             1 |               40 |        1 |             3 |     1
          0 |     0 |  88 |        3 |             1 |               88 |        1 |             3 |     1
(3 rows)

SELECT * FROM gp_toolkit.__gp_aovisimap('heap2ao2');
 tid | segno | row_num 
-----+-------+---------
(0 rows)

DROP TABLE heap2ao;
DROP TABLE heap2ao2;
-- check inherited tables
CREATE TABLE heapbase (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE child (c int) INHERITS (heapbase);
NOTICE:  table has parent, setting distribution columns to match parent table
CREATE TABLE heapbase2 (a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE child2 (c int) INHERITS (heapbase2);
NOTICE:  table has parent, setting distribution columns to match parent table
INSERT INTO heapbase SELECT i,i FROM generate_series(1,5) i;
INSERT INTO child SELECT i,i,i FROM generate_series(1,5) i;
INSERT INTO heapbase2 SELECT i,i FROM generate_series(1,5) i;
INSERT INTO child2 SELECT i,i,i FROM generate_series(1,5) i;
CREATE TEMP TABLE inheritrelfilebefore AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('heapbase', 'heapbase2')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('heapbase', 'heapbase2') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TEMP TABLE inheritchildrelfilebefore AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('child', 'child2')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('child', 'child2') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE heapbase SET ACCESS METHOD ao_row;
ALTER TABLE heapbase2 SET WITH (appendoptimized=true);
-- The altered table should inherit storage options from gp_default_storage_options
show gp_default_storage_options;
                   gp_default_storage_options                    
-----------------------------------------------------------------
 blocksize=65536,compresstype=zlib,compresslevel=5,checksum=true
(1 row)

SELECT blocksize,compresslevel,checksum,compresstype,columnstore
FROM pg_appendonly WHERE relid='heapbase'::regclass::oid;
 blocksize | compresslevel | checksum | compresstype | columnstore 
-----------+---------------+----------+--------------+-------------
     32768 |             0 | t        |              | f
(1 row)

SELECT blocksize,compresslevel,checksum,compresstype,columnstore
FROM pg_appendonly WHERE relid='heapbase2'::regclass::oid;
 blocksize | compresslevel | checksum | compresstype | columnstore 
-----------+---------------+----------+--------------+-------------
     32768 |             0 | t        |              | f
(1 row)

SELECT blocksize,compresslevel,checksum,compresstype,columnstore
FROM pg_appendonly WHERE relid='child'::regclass::oid;
 blocksize | compresslevel | checksum | compresstype | columnstore 
-----------+---------------+----------+--------------+-------------
(0 rows)

SELECT blocksize,compresslevel,checksum,compresstype,columnstore
FROM pg_appendonly WHERE relid='child2'::regclass::oid;
 blocksize | compresslevel | checksum | compresstype | columnstore 
-----------+---------------+----------+--------------+-------------
(0 rows)

-- Check data is intact
SELECT * FROM heapbase;
 a | b 
---+---
 2 | 2
 3 | 3
 4 | 4
 2 | 2
 3 | 3
 4 | 4
 1 | 1
 1 | 1
 5 | 5
 5 | 5
(10 rows)

SELECT * FROM heapbase2;
 a | b 
---+---
 2 | 2
 3 | 3
 4 | 4
 2 | 2
 3 | 3
 4 | 4
 1 | 1
 1 | 1
 5 | 5
 5 | 5
(10 rows)

-- relfile node should change for base table set to AO
CREATE TEMP TABLE inheritrelfileafter AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('heapbase', 'heapbase2')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('heapbase', 'heapbase2') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT * FROM inheritrelfilebefore INTERSECT SELECT * FROM inheritrelfileafter;
 segid | relfilenode 
-------+-------------
(0 rows)

-- relfile node should not change for child table
CREATE TEMP TABLE inheritchildrelfileafter AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('child', 'child2')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('child', 'child2') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT count(*) FROM (SELECT * FROM inheritchildrelfilebefore UNION SELECT * FROM inheritchildrelfileafter)a;
 count 
-------
     8
(1 row)

-- aux tables are created, pg_appendonly row is created
SELECT * FROM gp_toolkit.__gp_aoseg('heapbase');
 segment_id | segno | eof | tupcount | varblockcount | eof_uncompressed | modcount | formatversion | state 
------------+-------+-----+----------+---------------+------------------+----------+---------------+-------
          0 |     0 |  88 |        3 |             1 |               88 |        1 |             3 |     1
          1 |     0 |  40 |        1 |             1 |               40 |        1 |             3 |     1
          2 |     0 |  40 |        1 |             1 |               40 |        1 |             3 |     1
(3 rows)

SELECT * FROM gp_toolkit.__gp_aovisimap('heapbase');
 tid | segno | row_num 
-----+-------+---------
(0 rows)

SELECT * FROM gp_toolkit.__gp_aoseg('heapbase2');
 segment_id | segno | eof | tupcount | varblockcount | eof_uncompressed | modcount | formatversion | state 
------------+-------+-----+----------+---------------+------------------+----------+---------------+-------
          1 |     0 |  40 |        1 |             1 |               40 |        1 |             3 |     1
          2 |     0 |  40 |        1 |             1 |               40 |        1 |             3 |     1
          0 |     0 |  88 |        3 |             1 |               88 |        1 |             3 |     1
(3 rows)

SELECT * FROM gp_toolkit.__gp_aovisimap('heapbase2');
 tid | segno | row_num 
-----+-------+---------
(0 rows)

-- aux tables are not created for child table
SELECT * FROM gp_toolkit.__gp_aoseg('child');
ERROR:  'child' is not an append-only row relation  (seg0 slice1 127.0.0.1:7002 pid=59215)
SELECT * FROM gp_toolkit.__gp_aovisimap('child');
ERROR:  function not supported on relation
SELECT * FROM gp_toolkit.__gp_aoseg('child2');
ERROR:  'child2' is not an append-only row relation  (seg0 slice1 127.0.0.1:7002 pid=61089)
SELECT * FROM gp_toolkit.__gp_aovisimap('child2');
ERROR:  function not supported on relation
DROP TABLE heapbase CASCADE;
NOTICE:  drop cascades to table child
DROP TABLE heapbase2 CASCADE;
NOTICE:  drop cascades to table child2
